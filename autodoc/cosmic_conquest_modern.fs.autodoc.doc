: ARRAY ( 2D Array)
: DELAY                      ( delay a fixed amount of time)
   \ 5000 0 DO LOOP ;  ( in BASIC FOR I=1 TO 5000:NEXT takes about four seconds, seems too long)
: CLEAR-MSGE                 ( clear message area on text screen)
: XY@
: CLEAR-SCREEN ( clear hires screen 1)
: CLEAR-DISP ( fill screen array with FF's)
: CLEAR-GALAXY ( fills galactic array with NULLS)
: CLEAR-INFO ( fills info arrays with NULLs)
: RANDOM1 ( --- ran) ( random number in range 1-SIZE)
: RANDOM2 ( --- ran ) ( random number in range 1-SIZE)
: EDGE-CHECK ( n --- ng ) ( calculates wrap around of galaxy)
: INPUT ( --- n1 ) ( number input routine)
: F ( n1 --- add1 ) ( indexes current fleet array)
: END-MSGE                  ( end of game message)
: C$                        ( loads 8-bit value into table)
: $                         ( loads 16-bit value into table)
\ FORGET C$  ( we don't need C$ and $ any more)
: SKETCH  ( n ---  )    ( sketch shape n at current position)
\ this won't work on 64-bit gForth or even 32-bit!
\ this should probably be rewritten as
\ 2 * 0 swap spacefig + w@ spacefig + draw 
\ note that the fetch is now unsigned 16-bit
: SET-UP-GALAXY
: INITIALISE         ( initialise all variables and arrays)
: DRAW-BORDERS   ( draw borders o-f display and headings)
: FIND-DIRECTION     (  --- X Y )
: PRINT-IT  ( c  --- )
	\ DUP X @ 1+ Y @ 1+ SCREEN C@ =
	\ IF  ( display is already showing this shape so don't bother)
	\   DROP
	\ ELSE
      dup \ for ANSI print
      \ and once again, in ANSI
      \ FIXME this needs moved out to a separate file
   \ ENDIF
: DRAW-SCAN                       ( draw the screen display)
: DRAW-FIGURES    ( draw the totals in the disp1ay)
: DRAW-DISPLAY
: NEW-FLEET  ( fleet destroyed for some reason)
   \ 24 0 vhtab ." fleet destroyed"
   \ you can still move the fleet cursor around though
   \ and buy more ships and take on more legions
: MOVE-FLEET (  X Y ---  )
: CHECK-POSITION  ( X Y --- )
: OTHER-FLEET   ( make other fleet curent fleet)
: MOVE-LEFT
: MOVE-RIGHT
: MOVE-DOWN
: MOVE-UP
: ENLIST    ( enlisting 1egions on a planet)
: BUY    ( purchasing of ships at planet)
: GATHER   ( pick up legions from garrison onto fleet)
\ Orignal name: "LEAVE"
: DEPLOY   ( leave legions from fleet on planet as garrison)
: FRIENDLY-PLANET   ( options upon landing at colony)
: COLONISE ( attack an uncolonised planet)
: EMPTY-PLANET   ( in orbit round uncolonised planet)
: NOT-PLANET   ( there isn't a planet where he's trying to land)
: ATTACK       ( attack a planet controlled by the computer)
: ENEMY-PLANET   ( player orbits enemy planet)
: LAND   ( land on adjacent planet)
: REVOLT? ( planet at X,Y revolts)
: TAX     ( collect taxes on players planets)
: COMPUTER-TURN   ( computers turn to do something)
: FIRE     ( players fleet attacks computer fleet)
: INFORMATION  ( display the text screen information)
: exitprog ( -- ) 
	\ quit properly program
	0 colorize		\ restore colors
	s" tput cnorm" system 	\ restore cursor
	page			\ clearscreen
: OBEY-COMMAND
   \ 24 0 vhtab .s ( print current state of stack )
   \ not sure why sp! is required here and it appears to be syntactically different from gForth
   \ this should reset the parameter stack, are there values ever left lying around?
   \ SP! 
\ think this needs to be here to reset base
: COMPUTER?    ( is it the computers turn or not)
: GAME-END?
: RESTART        ( restarts the stopped game)
      \ ?TERMINAL
      \ I think this means something else here, is ?TERMINAL meant to mean "check for keypress"
      \ rather than "check for break" ?
         \ -1 LEN + !
         \ COMPUTER-TURN
   \ slow the game a little by printing how many loops until it's the computer's turn
: CONQUEST  ( the main game word)
   page	\ clear screen
   s" gamedata/title.txt" slurp-file type rand1 ! cr		\ title 
   s" tput civis" system					\ hide cursor to avoid it blinking 
   s" gamedata/author.txt" slurp-file cr type key Rand2 ! cr 	\ auhor
CONQUEST	\ main
