\ targets might be only PC/Smartphones/TAbs now ...  so ...  feel free to use high level modern gforth words words
create fname 8 allot s" .score" fname place						\ nice way to assign a file name 
variable tobeat 									\ to know if new high score is reached
\ words
: COLORIZE ( n -- ) 
	\ just like terminal ascii \e[31m, here use 31 colorize 
: home ( -- ) ( set cursor to home position, using ANSI codes)
\ real HCLR would clear HIRES1
: hclr ( -- ) ( clear screen using ANSI codes)
: vhtab ( y x -- x y -- ) ( position cursor on screen, using ANSI codes)
\ HELPFUL RESOURCE: https://dwheeler.com/6502/fig-forth-glossary.txt
\ Helpful book: Forth Fundamentals Vol. 2, C. Kevin McCabe, dilithium Press 1983, ISBN 0-88056-092-4
: MINUS negate	 ( FFv2 page 97) ;
: -DUP ?dup	 ( FFv2 page 39) ;
\ this woudln't be a problem on the Apple ][ but on modern systems the KEY routine is case sensitive
: inkey ( -- key)
\ not really needed as far as I guess noone uses versions of gforth older than 0.7.x
: checkversion ( -- exit|continue ) 
	\ check gforth version 
	version-string 2 - s\" 0.7" str= 0 >= if 	\ easy method to get tooling version
		page					\ if too old gforth exit ( might not be so possible but ... just in case... ) 
\ Read highscore from file & if needed update the file with a new highscrore 
: readfile
	here 'src-fd-in ! 							\ ram position
	dup allot								\ one alloc = 1 line
	fd-in @ close-file throw						\ now close file
	here 'src-fd-in @ - #src-fd-in ! 					\ get allocated
: highscore? ( finalscore > fd-in -- file )
		fname count file-status nip if i				\ fileexists ?
		then to fid1 							\ do not forget the file ID
		score @ s>d <# #s #> 						\ format score as a string
		fid1 write-line throw						\ write it on file 
		fid1 close-file throw						\ make real save of file 
